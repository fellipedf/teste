/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Body;
import io.swagger.model.Customer;
import io.swagger.model.Error;
import io.swagger.model.Status;
import io.swagger.model.dto.input.CustomerInputDto;
import io.swagger.model.dto.output.CustomerOutputDto;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-09-04T18:20:40.582Z[GMT]")
@Api(value = "customers", description = "the customers API")
public interface CustomersApi {

    @ApiOperation(value = "List customers", nickname = "findCustomer", notes = "List customers according to the parameters", response = Customer.class, tags={ "Customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomerOutputDto.class),
        @ApiResponse(code = 206, message = "Partial Content", response = Customer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 412, message = "Pagination Precondition Failed", response = String.class) })
    @RequestMapping(value = "/customers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CustomerOutputDto>> findCustomer(@ApiParam(value = "Client ID" ,required=true) @RequestHeader(value="client_id", required=true) String clientId
, @Min(0L)@ApiParam(value = "It indicates from which index data should be returned. For example, inputing _offset=100 means that pagination should start from the 101st record", allowableValues = "", defaultValue = "0") @Valid @RequestParam(value = "_offset", required = false, defaultValue="0") Long _offset
, @Min(0L) @Max(100L) @ApiParam(value = "It indicates how many records are to be returned from the _offset. For example, inputing _limit=100 means that the pagination must return a maximum of 100 records", allowableValues = "", defaultValue = "100") @Valid @RequestParam(value = "_limit", required = false, defaultValue="100") Long _limit
, @ApiParam(value = "It indicates which attributes the results list should be ordered by. For example, inputing _sort=[name,age] means that the list must be ordered by the name and age attributes. If any attribute does not exist, it must be ignored") @Valid @RequestParam(value = "_sort", required = false) List<String> _sort
, @ApiParam(value = "It indicates which attributes are to be returned. For example, inputing _fields=[name,age] means that the list must contain only those attributes. If any attribute does not exist, it must be ignored") @Valid @RequestParam(value = "_fields", required = false) List<String> _fields
, @ApiParam(value = "Customer name") @Valid @RequestParam(value = "name", required = false) String name
, @ApiParam(value = "City of the customer's address") @Valid @RequestParam(value = "city", required = false) String city
, @ApiParam(value = "Product name that was requested by a customer") @Valid @RequestParam(value = "productName", required = false) String productName
, @ApiParam(value = "Customer status") @Valid @RequestParam(value = "status", required = false) Status status
);


    @ApiOperation(value = "Find a customer", nickname = "findCustomerById", notes = "Return a customer according to the ID", response = Customer.class, tags={ "Customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Customer.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/customers/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomerOutputDto> findCustomerById(
            @ApiParam(value = "Client ID" ,required=true)
            @RequestHeader(value="client_id", required=true) String clientId,
            @ApiParam(value = "Unique identifier",required=true)
            @PathVariable("id") String id);


    @ApiOperation(value = "Insert a customer", nickname = "insertCustomer", notes = "Insert a customer", tags={ "Customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 422, message = "Unprocessable Entity", response = Error.class) })
    @RequestMapping(value = "/customers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> insertCustomer(
            @ApiParam(value = "Client ID" ,required=true)
            @RequestHeader(value="client_id", required=true) String clientId,
            @ApiParam(value = ""  )  @Valid @RequestBody CustomerInputDto body
);


    @ApiOperation(value = "Update a customer", nickname = "updateCustomer", notes = "Update a customer", response = Customer.class, tags={ "Customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomerOutputDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class),
        @ApiResponse(code = 422, message = "Unprocessable Entity", response = Error.class) })
    @RequestMapping(value = "/customers/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CustomerOutputDto> updateCustomer(
            @ApiParam(value = "Client ID", required=true)
            @RequestHeader(value="client_id", required=true) String clientId,
            @ApiParam(value = "Unique identifier", required=true)
            @PathVariable("id") String id,
            @ApiParam(value = ""  )
            @Valid @RequestBody CustomerInputDto body);


    @ApiOperation(value = "Update status of a customer", nickname = "updateCustomerStatus", notes = "Update status of a customer", response = Customer.class, tags={ "Customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomerOutputDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/customers/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<CustomerOutputDto> updateCustomerStatus(@ApiParam(value = "Client ID" ,required=true) @RequestHeader(value="client_id", required=true) String clientId
,@ApiParam(value = "Unique identifier",required=true) @PathVariable("id") String id
,@ApiParam(value = ""  )  @Valid @RequestBody Body body
);

}

